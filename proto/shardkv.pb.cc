// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shardkv.proto

#include "shardkv.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr ShardBeginArgs::ShardBeginArgs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tid_(0){}
struct ShardBeginArgsDefaultTypeInternal {
  constexpr ShardBeginArgsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShardBeginArgsDefaultTypeInternal() {}
  union {
    ShardBeginArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShardBeginArgsDefaultTypeInternal _ShardBeginArgs_default_instance_;
constexpr ShardBeginReply::ShardBeginReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_(0){}
struct ShardBeginReplyDefaultTypeInternal {
  constexpr ShardBeginReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShardBeginReplyDefaultTypeInternal() {}
  union {
    ShardBeginReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShardBeginReplyDefaultTypeInternal _ShardBeginReply_default_instance_;
constexpr ShardEndArgs::ShardEndArgs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tid_(0)
  , commitid_(0){}
struct ShardEndArgsDefaultTypeInternal {
  constexpr ShardEndArgsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShardEndArgsDefaultTypeInternal() {}
  union {
    ShardEndArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShardEndArgsDefaultTypeInternal _ShardEndArgs_default_instance_;
constexpr ShardEndReply::ShardEndReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_(0){}
struct ShardEndReplyDefaultTypeInternal {
  constexpr ShardEndReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShardEndReplyDefaultTypeInternal() {}
  union {
    ShardEndReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShardEndReplyDefaultTypeInternal _ShardEndReply_default_instance_;
constexpr ShardAbortArgs::ShardAbortArgs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tid_(0){}
struct ShardAbortArgsDefaultTypeInternal {
  constexpr ShardAbortArgsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShardAbortArgsDefaultTypeInternal() {}
  union {
    ShardAbortArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShardAbortArgsDefaultTypeInternal _ShardAbortArgs_default_instance_;
constexpr ShardAbortReply::ShardAbortReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_(0){}
struct ShardAbortReplyDefaultTypeInternal {
  constexpr ShardAbortReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShardAbortReplyDefaultTypeInternal() {}
  union {
    ShardAbortReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShardAbortReplyDefaultTypeInternal _ShardAbortReply_default_instance_;
constexpr ShardReadArgs::ShardReadArgs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tid_(0){}
struct ShardReadArgsDefaultTypeInternal {
  constexpr ShardReadArgsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShardReadArgsDefaultTypeInternal() {}
  union {
    ShardReadArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShardReadArgsDefaultTypeInternal _ShardReadArgs_default_instance_;
constexpr ShardReadReply::ShardReadReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , err_(0){}
struct ShardReadReplyDefaultTypeInternal {
  constexpr ShardReadReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShardReadReplyDefaultTypeInternal() {}
  union {
    ShardReadReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShardReadReplyDefaultTypeInternal _ShardReadReply_default_instance_;
constexpr ShardWriteArgs::ShardWriteArgs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , clientid_(int64_t{0})
  , seqid_(int64_t{0})
  , tid_(0){}
struct ShardWriteArgsDefaultTypeInternal {
  constexpr ShardWriteArgsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShardWriteArgsDefaultTypeInternal() {}
  union {
    ShardWriteArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShardWriteArgsDefaultTypeInternal _ShardWriteArgs_default_instance_;
constexpr ShardWriteReply::ShardWriteReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_(0){}
struct ShardWriteReplyDefaultTypeInternal {
  constexpr ShardWriteReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShardWriteReplyDefaultTypeInternal() {}
  union {
    ShardWriteReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShardWriteReplyDefaultTypeInternal _ShardWriteReply_default_instance_;
constexpr ConnectArgs::ConnectArgs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : host_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ConnectArgsDefaultTypeInternal {
  constexpr ConnectArgsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConnectArgsDefaultTypeInternal() {}
  union {
    ConnectArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConnectArgsDefaultTypeInternal _ConnectArgs_default_instance_;
constexpr ConnectReply::ConnectReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_(0){}
struct ConnectReplyDefaultTypeInternal {
  constexpr ConnectReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConnectReplyDefaultTypeInternal() {}
  union {
    ConnectReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConnectReplyDefaultTypeInternal _ConnectReply_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_shardkv_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_shardkv_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_shardkv_2eproto[1];

const uint32_t TableStruct_shardkv_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ShardBeginArgs, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ShardBeginArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ShardBeginArgs, tid_),
  0,
  PROTOBUF_FIELD_OFFSET(::ShardBeginReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ShardBeginReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ShardBeginReply, err_),
  0,
  PROTOBUF_FIELD_OFFSET(::ShardEndArgs, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ShardEndArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ShardEndArgs, tid_),
  PROTOBUF_FIELD_OFFSET(::ShardEndArgs, commitid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ShardEndReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ShardEndReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ShardEndReply, err_),
  0,
  PROTOBUF_FIELD_OFFSET(::ShardAbortArgs, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ShardAbortArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ShardAbortArgs, tid_),
  0,
  PROTOBUF_FIELD_OFFSET(::ShardAbortReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ShardAbortReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ShardAbortReply, err_),
  0,
  PROTOBUF_FIELD_OFFSET(::ShardReadArgs, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ShardReadArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ShardReadArgs, tid_),
  PROTOBUF_FIELD_OFFSET(::ShardReadArgs, key_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ShardReadReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ShardReadReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ShardReadReply, err_),
  PROTOBUF_FIELD_OFFSET(::ShardReadReply, value_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ShardWriteArgs, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ShardWriteArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ShardWriteArgs, tid_),
  PROTOBUF_FIELD_OFFSET(::ShardWriteArgs, key_),
  PROTOBUF_FIELD_OFFSET(::ShardWriteArgs, value_),
  PROTOBUF_FIELD_OFFSET(::ShardWriteArgs, clientid_),
  PROTOBUF_FIELD_OFFSET(::ShardWriteArgs, seqid_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ShardWriteReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ShardWriteReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ShardWriteReply, err_),
  0,
  PROTOBUF_FIELD_OFFSET(::ConnectArgs, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ConnectArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ConnectArgs, host_),
  0,
  PROTOBUF_FIELD_OFFSET(::ConnectReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ConnectReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ConnectReply, err_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::ShardBeginArgs)},
  { 8, 15, -1, sizeof(::ShardBeginReply)},
  { 16, 24, -1, sizeof(::ShardEndArgs)},
  { 26, 33, -1, sizeof(::ShardEndReply)},
  { 34, 41, -1, sizeof(::ShardAbortArgs)},
  { 42, 49, -1, sizeof(::ShardAbortReply)},
  { 50, 58, -1, sizeof(::ShardReadArgs)},
  { 60, 68, -1, sizeof(::ShardReadReply)},
  { 70, 81, -1, sizeof(::ShardWriteArgs)},
  { 86, 93, -1, sizeof(::ShardWriteReply)},
  { 94, 101, -1, sizeof(::ConnectArgs)},
  { 102, 109, -1, sizeof(::ConnectReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ShardBeginArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ShardBeginReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ShardEndArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ShardEndReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ShardAbortArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ShardAbortReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ShardReadArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ShardReadReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ShardWriteArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ShardWriteReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConnectArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConnectReply_default_instance_),
};

const char descriptor_table_protodef_shardkv_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rshardkv.proto\"\035\n\016ShardBeginArgs\022\013\n\003Tid"
  "\030\001 \002(\005\"\036\n\017ShardBeginReply\022\013\n\003err\030\001 \002(\005\"-"
  "\n\014ShardEndArgs\022\013\n\003Tid\030\001 \002(\005\022\020\n\010commitID\030"
  "\002 \002(\005\"\034\n\rShardEndReply\022\013\n\003err\030\001 \002(\005\"\035\n\016S"
  "hardAbortArgs\022\013\n\003Tid\030\001 \002(\005\"\036\n\017ShardAbort"
  "Reply\022\013\n\003err\030\001 \002(\005\")\n\rShardReadArgs\022\013\n\003T"
  "id\030\001 \002(\005\022\013\n\003key\030\002 \002(\t\",\n\016ShardReadReply\022"
  "\013\n\003err\030\001 \002(\005\022\r\n\005value\030\002 \001(\t\"Z\n\016ShardWrit"
  "eArgs\022\013\n\003Tid\030\001 \002(\005\022\013\n\003key\030\002 \002(\t\022\r\n\005value"
  "\030\003 \002(\t\022\020\n\010clientID\030\004 \001(\003\022\r\n\005seqID\030\005 \001(\003\""
  "\036\n\017ShardWriteReply\022\013\n\003err\030\001 \002(\005\"\033\n\013Conne"
  "ctArgs\022\014\n\004host\030\001 \002(\t\"\033\n\014ConnectReply\022\013\n\003"
  "err\030\001 \002(\0052\226\002\n\013ShardKvBase\022.\n\013PrepareRead"
  "\022\016.ShardReadArgs\032\017.ShardReadReply\0221\n\014Pre"
  "pareWrite\022\017.ShardWriteArgs\032\020.ShardWriteR"
  "eply\022*\n\005BEGIN\022\017.ShardBeginArgs\032\020.ShardBe"
  "ginReply\022$\n\003END\022\r.ShardEndArgs\032\016.ShardEn"
  "dReply\022*\n\005ABORT\022\017.ShardAbortArgs\032\020.Shard"
  "AbortReply\022&\n\007CONNECT\022\014.ConnectArgs\032\r.Co"
  "nnectReplyB\003\200\001\001"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_shardkv_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_shardkv_2eproto = {
  false, false, 775, descriptor_table_protodef_shardkv_2eproto, "shardkv.proto", 
  &descriptor_table_shardkv_2eproto_once, nullptr, 0, 12,
  schemas, file_default_instances, TableStruct_shardkv_2eproto::offsets,
  file_level_metadata_shardkv_2eproto, file_level_enum_descriptors_shardkv_2eproto, file_level_service_descriptors_shardkv_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_shardkv_2eproto_getter() {
  return &descriptor_table_shardkv_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_shardkv_2eproto(&descriptor_table_shardkv_2eproto);

// ===================================================================

class ShardBeginArgs::_Internal {
 public:
  using HasBits = decltype(std::declval<ShardBeginArgs>()._has_bits_);
  static void set_has_tid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ShardBeginArgs::ShardBeginArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ShardBeginArgs)
}
ShardBeginArgs::ShardBeginArgs(const ShardBeginArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tid_ = from.tid_;
  // @@protoc_insertion_point(copy_constructor:ShardBeginArgs)
}

inline void ShardBeginArgs::SharedCtor() {
tid_ = 0;
}

ShardBeginArgs::~ShardBeginArgs() {
  // @@protoc_insertion_point(destructor:ShardBeginArgs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShardBeginArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShardBeginArgs::ArenaDtor(void* object) {
  ShardBeginArgs* _this = reinterpret_cast< ShardBeginArgs* >(object);
  (void)_this;
}
void ShardBeginArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShardBeginArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShardBeginArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:ShardBeginArgs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardBeginArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 Tid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tid(&has_bits);
          tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShardBeginArgs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShardBeginArgs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Tid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShardBeginArgs)
  return target;
}

size_t ShardBeginArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShardBeginArgs)
  size_t total_size = 0;

  // required int32 Tid = 1;
  if (_internal_has_tid()) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardBeginArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShardBeginArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardBeginArgs::GetClassData() const { return &_class_data_; }

void ShardBeginArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ShardBeginArgs *>(to)->MergeFrom(
      static_cast<const ShardBeginArgs &>(from));
}


void ShardBeginArgs::MergeFrom(const ShardBeginArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShardBeginArgs)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tid()) {
    _internal_set_tid(from._internal_tid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShardBeginArgs::CopyFrom(const ShardBeginArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShardBeginArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardBeginArgs::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ShardBeginArgs::InternalSwap(ShardBeginArgs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tid_, other->tid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardBeginArgs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_shardkv_2eproto_getter, &descriptor_table_shardkv_2eproto_once,
      file_level_metadata_shardkv_2eproto[0]);
}

// ===================================================================

class ShardBeginReply::_Internal {
 public:
  using HasBits = decltype(std::declval<ShardBeginReply>()._has_bits_);
  static void set_has_err(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ShardBeginReply::ShardBeginReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ShardBeginReply)
}
ShardBeginReply::ShardBeginReply(const ShardBeginReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_ = from.err_;
  // @@protoc_insertion_point(copy_constructor:ShardBeginReply)
}

inline void ShardBeginReply::SharedCtor() {
err_ = 0;
}

ShardBeginReply::~ShardBeginReply() {
  // @@protoc_insertion_point(destructor:ShardBeginReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShardBeginReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShardBeginReply::ArenaDtor(void* object) {
  ShardBeginReply* _this = reinterpret_cast< ShardBeginReply* >(object);
  (void)_this;
}
void ShardBeginReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShardBeginReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShardBeginReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ShardBeginReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardBeginReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 err = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_err(&has_bits);
          err_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShardBeginReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShardBeginReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 err = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShardBeginReply)
  return target;
}

size_t ShardBeginReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShardBeginReply)
  size_t total_size = 0;

  // required int32 err = 1;
  if (_internal_has_err()) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardBeginReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShardBeginReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardBeginReply::GetClassData() const { return &_class_data_; }

void ShardBeginReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ShardBeginReply *>(to)->MergeFrom(
      static_cast<const ShardBeginReply &>(from));
}


void ShardBeginReply::MergeFrom(const ShardBeginReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShardBeginReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_err()) {
    _internal_set_err(from._internal_err());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShardBeginReply::CopyFrom(const ShardBeginReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShardBeginReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardBeginReply::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ShardBeginReply::InternalSwap(ShardBeginReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(err_, other->err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardBeginReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_shardkv_2eproto_getter, &descriptor_table_shardkv_2eproto_once,
      file_level_metadata_shardkv_2eproto[1]);
}

// ===================================================================

class ShardEndArgs::_Internal {
 public:
  using HasBits = decltype(std::declval<ShardEndArgs>()._has_bits_);
  static void set_has_tid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_commitid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ShardEndArgs::ShardEndArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ShardEndArgs)
}
ShardEndArgs::ShardEndArgs(const ShardEndArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tid_, &from.tid_,
    static_cast<size_t>(reinterpret_cast<char*>(&commitid_) -
    reinterpret_cast<char*>(&tid_)) + sizeof(commitid_));
  // @@protoc_insertion_point(copy_constructor:ShardEndArgs)
}

inline void ShardEndArgs::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&commitid_) -
    reinterpret_cast<char*>(&tid_)) + sizeof(commitid_));
}

ShardEndArgs::~ShardEndArgs() {
  // @@protoc_insertion_point(destructor:ShardEndArgs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShardEndArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShardEndArgs::ArenaDtor(void* object) {
  ShardEndArgs* _this = reinterpret_cast< ShardEndArgs* >(object);
  (void)_this;
}
void ShardEndArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShardEndArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShardEndArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:ShardEndArgs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&tid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&commitid_) -
        reinterpret_cast<char*>(&tid_)) + sizeof(commitid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardEndArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 Tid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tid(&has_bits);
          tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 commitID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_commitid(&has_bits);
          commitid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShardEndArgs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShardEndArgs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Tid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tid(), target);
  }

  // required int32 commitID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_commitid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShardEndArgs)
  return target;
}

size_t ShardEndArgs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ShardEndArgs)
  size_t total_size = 0;

  if (_internal_has_tid()) {
    // required int32 Tid = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tid());
  }

  if (_internal_has_commitid()) {
    // required int32 commitID = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_commitid());
  }

  return total_size;
}
size_t ShardEndArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShardEndArgs)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 Tid = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tid());

    // required int32 commitID = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_commitid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardEndArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShardEndArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardEndArgs::GetClassData() const { return &_class_data_; }

void ShardEndArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ShardEndArgs *>(to)->MergeFrom(
      static_cast<const ShardEndArgs &>(from));
}


void ShardEndArgs::MergeFrom(const ShardEndArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShardEndArgs)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tid_ = from.tid_;
    }
    if (cached_has_bits & 0x00000002u) {
      commitid_ = from.commitid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShardEndArgs::CopyFrom(const ShardEndArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShardEndArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardEndArgs::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ShardEndArgs::InternalSwap(ShardEndArgs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShardEndArgs, commitid_)
      + sizeof(ShardEndArgs::commitid_)
      - PROTOBUF_FIELD_OFFSET(ShardEndArgs, tid_)>(
          reinterpret_cast<char*>(&tid_),
          reinterpret_cast<char*>(&other->tid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardEndArgs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_shardkv_2eproto_getter, &descriptor_table_shardkv_2eproto_once,
      file_level_metadata_shardkv_2eproto[2]);
}

// ===================================================================

class ShardEndReply::_Internal {
 public:
  using HasBits = decltype(std::declval<ShardEndReply>()._has_bits_);
  static void set_has_err(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ShardEndReply::ShardEndReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ShardEndReply)
}
ShardEndReply::ShardEndReply(const ShardEndReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_ = from.err_;
  // @@protoc_insertion_point(copy_constructor:ShardEndReply)
}

inline void ShardEndReply::SharedCtor() {
err_ = 0;
}

ShardEndReply::~ShardEndReply() {
  // @@protoc_insertion_point(destructor:ShardEndReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShardEndReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShardEndReply::ArenaDtor(void* object) {
  ShardEndReply* _this = reinterpret_cast< ShardEndReply* >(object);
  (void)_this;
}
void ShardEndReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShardEndReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShardEndReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ShardEndReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardEndReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 err = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_err(&has_bits);
          err_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShardEndReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShardEndReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 err = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShardEndReply)
  return target;
}

size_t ShardEndReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShardEndReply)
  size_t total_size = 0;

  // required int32 err = 1;
  if (_internal_has_err()) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardEndReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShardEndReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardEndReply::GetClassData() const { return &_class_data_; }

void ShardEndReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ShardEndReply *>(to)->MergeFrom(
      static_cast<const ShardEndReply &>(from));
}


void ShardEndReply::MergeFrom(const ShardEndReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShardEndReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_err()) {
    _internal_set_err(from._internal_err());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShardEndReply::CopyFrom(const ShardEndReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShardEndReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardEndReply::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ShardEndReply::InternalSwap(ShardEndReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(err_, other->err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardEndReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_shardkv_2eproto_getter, &descriptor_table_shardkv_2eproto_once,
      file_level_metadata_shardkv_2eproto[3]);
}

// ===================================================================

class ShardAbortArgs::_Internal {
 public:
  using HasBits = decltype(std::declval<ShardAbortArgs>()._has_bits_);
  static void set_has_tid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ShardAbortArgs::ShardAbortArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ShardAbortArgs)
}
ShardAbortArgs::ShardAbortArgs(const ShardAbortArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tid_ = from.tid_;
  // @@protoc_insertion_point(copy_constructor:ShardAbortArgs)
}

inline void ShardAbortArgs::SharedCtor() {
tid_ = 0;
}

ShardAbortArgs::~ShardAbortArgs() {
  // @@protoc_insertion_point(destructor:ShardAbortArgs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShardAbortArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShardAbortArgs::ArenaDtor(void* object) {
  ShardAbortArgs* _this = reinterpret_cast< ShardAbortArgs* >(object);
  (void)_this;
}
void ShardAbortArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShardAbortArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShardAbortArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:ShardAbortArgs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardAbortArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 Tid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tid(&has_bits);
          tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShardAbortArgs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShardAbortArgs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Tid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShardAbortArgs)
  return target;
}

size_t ShardAbortArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShardAbortArgs)
  size_t total_size = 0;

  // required int32 Tid = 1;
  if (_internal_has_tid()) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardAbortArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShardAbortArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardAbortArgs::GetClassData() const { return &_class_data_; }

void ShardAbortArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ShardAbortArgs *>(to)->MergeFrom(
      static_cast<const ShardAbortArgs &>(from));
}


void ShardAbortArgs::MergeFrom(const ShardAbortArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShardAbortArgs)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tid()) {
    _internal_set_tid(from._internal_tid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShardAbortArgs::CopyFrom(const ShardAbortArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShardAbortArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardAbortArgs::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ShardAbortArgs::InternalSwap(ShardAbortArgs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tid_, other->tid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardAbortArgs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_shardkv_2eproto_getter, &descriptor_table_shardkv_2eproto_once,
      file_level_metadata_shardkv_2eproto[4]);
}

// ===================================================================

class ShardAbortReply::_Internal {
 public:
  using HasBits = decltype(std::declval<ShardAbortReply>()._has_bits_);
  static void set_has_err(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ShardAbortReply::ShardAbortReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ShardAbortReply)
}
ShardAbortReply::ShardAbortReply(const ShardAbortReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_ = from.err_;
  // @@protoc_insertion_point(copy_constructor:ShardAbortReply)
}

inline void ShardAbortReply::SharedCtor() {
err_ = 0;
}

ShardAbortReply::~ShardAbortReply() {
  // @@protoc_insertion_point(destructor:ShardAbortReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShardAbortReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShardAbortReply::ArenaDtor(void* object) {
  ShardAbortReply* _this = reinterpret_cast< ShardAbortReply* >(object);
  (void)_this;
}
void ShardAbortReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShardAbortReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShardAbortReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ShardAbortReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardAbortReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 err = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_err(&has_bits);
          err_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShardAbortReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShardAbortReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 err = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShardAbortReply)
  return target;
}

size_t ShardAbortReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShardAbortReply)
  size_t total_size = 0;

  // required int32 err = 1;
  if (_internal_has_err()) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardAbortReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShardAbortReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardAbortReply::GetClassData() const { return &_class_data_; }

void ShardAbortReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ShardAbortReply *>(to)->MergeFrom(
      static_cast<const ShardAbortReply &>(from));
}


void ShardAbortReply::MergeFrom(const ShardAbortReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShardAbortReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_err()) {
    _internal_set_err(from._internal_err());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShardAbortReply::CopyFrom(const ShardAbortReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShardAbortReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardAbortReply::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ShardAbortReply::InternalSwap(ShardAbortReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(err_, other->err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardAbortReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_shardkv_2eproto_getter, &descriptor_table_shardkv_2eproto_once,
      file_level_metadata_shardkv_2eproto[5]);
}

// ===================================================================

class ShardReadArgs::_Internal {
 public:
  using HasBits = decltype(std::declval<ShardReadArgs>()._has_bits_);
  static void set_has_tid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ShardReadArgs::ShardReadArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ShardReadArgs)
}
ShardReadArgs::ShardReadArgs(const ShardReadArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  tid_ = from.tid_;
  // @@protoc_insertion_point(copy_constructor:ShardReadArgs)
}

inline void ShardReadArgs::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tid_ = 0;
}

ShardReadArgs::~ShardReadArgs() {
  // @@protoc_insertion_point(destructor:ShardReadArgs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShardReadArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShardReadArgs::ArenaDtor(void* object) {
  ShardReadArgs* _this = reinterpret_cast< ShardReadArgs* >(object);
  (void)_this;
}
void ShardReadArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShardReadArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShardReadArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:ShardReadArgs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_.ClearNonDefaultToEmpty();
  }
  tid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardReadArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 Tid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tid(&has_bits);
          tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ShardReadArgs.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShardReadArgs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShardReadArgs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Tid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tid(), target);
  }

  // required string key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ShardReadArgs.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShardReadArgs)
  return target;
}

size_t ShardReadArgs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ShardReadArgs)
  size_t total_size = 0;

  if (_internal_has_key()) {
    // required string key = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (_internal_has_tid()) {
    // required int32 Tid = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tid());
  }

  return total_size;
}
size_t ShardReadArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShardReadArgs)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());

    // required int32 Tid = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardReadArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShardReadArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardReadArgs::GetClassData() const { return &_class_data_; }

void ShardReadArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ShardReadArgs *>(to)->MergeFrom(
      static_cast<const ShardReadArgs &>(from));
}


void ShardReadArgs::MergeFrom(const ShardReadArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShardReadArgs)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      tid_ = from.tid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShardReadArgs::CopyFrom(const ShardReadArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShardReadArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardReadArgs::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ShardReadArgs::InternalSwap(ShardReadArgs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  swap(tid_, other->tid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardReadArgs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_shardkv_2eproto_getter, &descriptor_table_shardkv_2eproto_once,
      file_level_metadata_shardkv_2eproto[6]);
}

// ===================================================================

class ShardReadReply::_Internal {
 public:
  using HasBits = decltype(std::declval<ShardReadReply>()._has_bits_);
  static void set_has_err(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

ShardReadReply::ShardReadReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ShardReadReply)
}
ShardReadReply::ShardReadReply(const ShardReadReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  err_ = from.err_;
  // @@protoc_insertion_point(copy_constructor:ShardReadReply)
}

inline void ShardReadReply::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
err_ = 0;
}

ShardReadReply::~ShardReadReply() {
  // @@protoc_insertion_point(destructor:ShardReadReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShardReadReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShardReadReply::ArenaDtor(void* object) {
  ShardReadReply* _this = reinterpret_cast< ShardReadReply* >(object);
  (void)_this;
}
void ShardReadReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShardReadReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShardReadReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ShardReadReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmpty();
  }
  err_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardReadReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 err = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_err(&has_bits);
          err_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ShardReadReply.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShardReadReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShardReadReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 err = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_err(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ShardReadReply.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShardReadReply)
  return target;
}

size_t ShardReadReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShardReadReply)
  size_t total_size = 0;

  // required int32 err = 1;
  if (_internal_has_err()) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string value = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardReadReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShardReadReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardReadReply::GetClassData() const { return &_class_data_; }

void ShardReadReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ShardReadReply *>(to)->MergeFrom(
      static_cast<const ShardReadReply &>(from));
}


void ShardReadReply::MergeFrom(const ShardReadReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShardReadReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      err_ = from.err_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShardReadReply::CopyFrom(const ShardReadReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShardReadReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardReadReply::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ShardReadReply::InternalSwap(ShardReadReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  swap(err_, other->err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardReadReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_shardkv_2eproto_getter, &descriptor_table_shardkv_2eproto_once,
      file_level_metadata_shardkv_2eproto[7]);
}

// ===================================================================

class ShardWriteArgs::_Internal {
 public:
  using HasBits = decltype(std::declval<ShardWriteArgs>()._has_bits_);
  static void set_has_tid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clientid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seqid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000013) ^ 0x00000013) != 0;
  }
};

ShardWriteArgs::ShardWriteArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ShardWriteArgs)
}
ShardWriteArgs::ShardWriteArgs(const ShardWriteArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  ::memcpy(&clientid_, &from.clientid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tid_) -
    reinterpret_cast<char*>(&clientid_)) + sizeof(tid_));
  // @@protoc_insertion_point(copy_constructor:ShardWriteArgs)
}

inline void ShardWriteArgs::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&clientid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tid_) -
    reinterpret_cast<char*>(&clientid_)) + sizeof(tid_));
}

ShardWriteArgs::~ShardWriteArgs() {
  // @@protoc_insertion_point(destructor:ShardWriteArgs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShardWriteArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShardWriteArgs::ArenaDtor(void* object) {
  ShardWriteArgs* _this = reinterpret_cast< ShardWriteArgs* >(object);
  (void)_this;
}
void ShardWriteArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShardWriteArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShardWriteArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:ShardWriteArgs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&clientid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tid_) -
        reinterpret_cast<char*>(&clientid_)) + sizeof(tid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardWriteArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 Tid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tid(&has_bits);
          tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ShardWriteArgs.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ShardWriteArgs.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 clientID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_clientid(&has_bits);
          clientid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 seqID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_seqid(&has_bits);
          seqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShardWriteArgs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShardWriteArgs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Tid = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tid(), target);
  }

  // required string key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ShardWriteArgs.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // required string value = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ShardWriteArgs.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  // optional int64 clientID = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_clientid(), target);
  }

  // optional int64 seqID = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_seqid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShardWriteArgs)
  return target;
}

size_t ShardWriteArgs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ShardWriteArgs)
  size_t total_size = 0;

  if (_internal_has_key()) {
    // required string key = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (_internal_has_value()) {
    // required string value = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (_internal_has_tid()) {
    // required int32 Tid = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tid());
  }

  return total_size;
}
size_t ShardWriteArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShardWriteArgs)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000013) ^ 0x00000013) == 0) {  // All required fields are present.
    // required string key = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());

    // required string value = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

    // required int32 Tid = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional int64 clientID = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_clientid());
    }

    // optional int64 seqID = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seqid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardWriteArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShardWriteArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardWriteArgs::GetClassData() const { return &_class_data_; }

void ShardWriteArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ShardWriteArgs *>(to)->MergeFrom(
      static_cast<const ShardWriteArgs &>(from));
}


void ShardWriteArgs::MergeFrom(const ShardWriteArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShardWriteArgs)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      clientid_ = from.clientid_;
    }
    if (cached_has_bits & 0x00000008u) {
      seqid_ = from.seqid_;
    }
    if (cached_has_bits & 0x00000010u) {
      tid_ = from.tid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShardWriteArgs::CopyFrom(const ShardWriteArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShardWriteArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardWriteArgs::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ShardWriteArgs::InternalSwap(ShardWriteArgs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShardWriteArgs, tid_)
      + sizeof(ShardWriteArgs::tid_)
      - PROTOBUF_FIELD_OFFSET(ShardWriteArgs, clientid_)>(
          reinterpret_cast<char*>(&clientid_),
          reinterpret_cast<char*>(&other->clientid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardWriteArgs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_shardkv_2eproto_getter, &descriptor_table_shardkv_2eproto_once,
      file_level_metadata_shardkv_2eproto[8]);
}

// ===================================================================

class ShardWriteReply::_Internal {
 public:
  using HasBits = decltype(std::declval<ShardWriteReply>()._has_bits_);
  static void set_has_err(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ShardWriteReply::ShardWriteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ShardWriteReply)
}
ShardWriteReply::ShardWriteReply(const ShardWriteReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_ = from.err_;
  // @@protoc_insertion_point(copy_constructor:ShardWriteReply)
}

inline void ShardWriteReply::SharedCtor() {
err_ = 0;
}

ShardWriteReply::~ShardWriteReply() {
  // @@protoc_insertion_point(destructor:ShardWriteReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShardWriteReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShardWriteReply::ArenaDtor(void* object) {
  ShardWriteReply* _this = reinterpret_cast< ShardWriteReply* >(object);
  (void)_this;
}
void ShardWriteReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShardWriteReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShardWriteReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ShardWriteReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardWriteReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 err = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_err(&has_bits);
          err_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShardWriteReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShardWriteReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 err = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShardWriteReply)
  return target;
}

size_t ShardWriteReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShardWriteReply)
  size_t total_size = 0;

  // required int32 err = 1;
  if (_internal_has_err()) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardWriteReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShardWriteReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardWriteReply::GetClassData() const { return &_class_data_; }

void ShardWriteReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ShardWriteReply *>(to)->MergeFrom(
      static_cast<const ShardWriteReply &>(from));
}


void ShardWriteReply::MergeFrom(const ShardWriteReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShardWriteReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_err()) {
    _internal_set_err(from._internal_err());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShardWriteReply::CopyFrom(const ShardWriteReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShardWriteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardWriteReply::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ShardWriteReply::InternalSwap(ShardWriteReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(err_, other->err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardWriteReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_shardkv_2eproto_getter, &descriptor_table_shardkv_2eproto_once,
      file_level_metadata_shardkv_2eproto[9]);
}

// ===================================================================

class ConnectArgs::_Internal {
 public:
  using HasBits = decltype(std::declval<ConnectArgs>()._has_bits_);
  static void set_has_host(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ConnectArgs::ConnectArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ConnectArgs)
}
ConnectArgs::ConnectArgs(const ConnectArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_host()) {
    host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_host(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ConnectArgs)
}

inline void ConnectArgs::SharedCtor() {
host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConnectArgs::~ConnectArgs() {
  // @@protoc_insertion_point(destructor:ConnectArgs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConnectArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConnectArgs::ArenaDtor(void* object) {
  ConnectArgs* _this = reinterpret_cast< ConnectArgs* >(object);
  (void)_this;
}
void ConnectArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConnectArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:ConnectArgs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    host_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConnectArgs.host");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectArgs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConnectArgs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string host = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ConnectArgs.host");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConnectArgs)
  return target;
}

size_t ConnectArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConnectArgs)
  size_t total_size = 0;

  // required string host = 1;
  if (_internal_has_host()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConnectArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectArgs::GetClassData() const { return &_class_data_; }

void ConnectArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConnectArgs *>(to)->MergeFrom(
      static_cast<const ConnectArgs &>(from));
}


void ConnectArgs::MergeFrom(const ConnectArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConnectArgs)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_host()) {
    _internal_set_host(from._internal_host());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectArgs::CopyFrom(const ConnectArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConnectArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectArgs::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ConnectArgs::InternalSwap(ConnectArgs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &host_, lhs_arena,
      &other->host_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectArgs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_shardkv_2eproto_getter, &descriptor_table_shardkv_2eproto_once,
      file_level_metadata_shardkv_2eproto[10]);
}

// ===================================================================

class ConnectReply::_Internal {
 public:
  using HasBits = decltype(std::declval<ConnectReply>()._has_bits_);
  static void set_has_err(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ConnectReply::ConnectReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ConnectReply)
}
ConnectReply::ConnectReply(const ConnectReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_ = from.err_;
  // @@protoc_insertion_point(copy_constructor:ConnectReply)
}

inline void ConnectReply::SharedCtor() {
err_ = 0;
}

ConnectReply::~ConnectReply() {
  // @@protoc_insertion_point(destructor:ConnectReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConnectReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConnectReply::ArenaDtor(void* object) {
  ConnectReply* _this = reinterpret_cast< ConnectReply* >(object);
  (void)_this;
}
void ConnectReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConnectReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ConnectReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 err = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_err(&has_bits);
          err_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConnectReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 err = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConnectReply)
  return target;
}

size_t ConnectReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConnectReply)
  size_t total_size = 0;

  // required int32 err = 1;
  if (_internal_has_err()) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConnectReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectReply::GetClassData() const { return &_class_data_; }

void ConnectReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConnectReply *>(to)->MergeFrom(
      static_cast<const ConnectReply &>(from));
}


void ConnectReply::MergeFrom(const ConnectReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConnectReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_err()) {
    _internal_set_err(from._internal_err());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectReply::CopyFrom(const ConnectReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConnectReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectReply::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ConnectReply::InternalSwap(ConnectReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(err_, other->err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_shardkv_2eproto_getter, &descriptor_table_shardkv_2eproto_once,
      file_level_metadata_shardkv_2eproto[11]);
}

// ===================================================================

ShardKvBase::~ShardKvBase() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* ShardKvBase::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_shardkv_2eproto);
  return file_level_service_descriptors_shardkv_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* ShardKvBase::GetDescriptor() {
  return descriptor();
}

void ShardKvBase::PrepareRead(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ShardReadArgs*,
                         ::ShardReadReply*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method PrepareRead() not implemented.");
  done->Run();
}

void ShardKvBase::PrepareWrite(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ShardWriteArgs*,
                         ::ShardWriteReply*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method PrepareWrite() not implemented.");
  done->Run();
}

void ShardKvBase::BEGIN(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ShardBeginArgs*,
                         ::ShardBeginReply*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BEGIN() not implemented.");
  done->Run();
}

void ShardKvBase::END(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ShardEndArgs*,
                         ::ShardEndReply*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method END() not implemented.");
  done->Run();
}

void ShardKvBase::ABORT(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ShardAbortArgs*,
                         ::ShardAbortReply*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ABORT() not implemented.");
  done->Run();
}

void ShardKvBase::CONNECT(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ConnectArgs*,
                         ::ConnectReply*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CONNECT() not implemented.");
  done->Run();
}

void ShardKvBase::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_shardkv_2eproto[0]);
  switch(method->index()) {
    case 0:
      PrepareRead(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ShardReadArgs*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::ShardReadReply*>(
                 response),
             done);
      break;
    case 1:
      PrepareWrite(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ShardWriteArgs*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::ShardWriteReply*>(
                 response),
             done);
      break;
    case 2:
      BEGIN(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ShardBeginArgs*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::ShardBeginReply*>(
                 response),
             done);
      break;
    case 3:
      END(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ShardEndArgs*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::ShardEndReply*>(
                 response),
             done);
      break;
    case 4:
      ABORT(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ShardAbortArgs*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::ShardAbortReply*>(
                 response),
             done);
      break;
    case 5:
      CONNECT(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ConnectArgs*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::ConnectReply*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& ShardKvBase::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::ShardReadArgs::default_instance();
    case 1:
      return ::ShardWriteArgs::default_instance();
    case 2:
      return ::ShardBeginArgs::default_instance();
    case 3:
      return ::ShardEndArgs::default_instance();
    case 4:
      return ::ShardAbortArgs::default_instance();
    case 5:
      return ::ConnectArgs::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& ShardKvBase::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::ShardReadReply::default_instance();
    case 1:
      return ::ShardWriteReply::default_instance();
    case 2:
      return ::ShardBeginReply::default_instance();
    case 3:
      return ::ShardEndReply::default_instance();
    case 4:
      return ::ShardAbortReply::default_instance();
    case 5:
      return ::ConnectReply::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

ShardKvBase_Stub::ShardKvBase_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ShardKvBase_Stub::ShardKvBase_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
ShardKvBase_Stub::~ShardKvBase_Stub() {
  if (owns_channel_) delete channel_;
}

void ShardKvBase_Stub::PrepareRead(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ShardReadArgs* request,
                              ::ShardReadReply* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ShardKvBase_Stub::PrepareWrite(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ShardWriteArgs* request,
                              ::ShardWriteReply* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void ShardKvBase_Stub::BEGIN(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ShardBeginArgs* request,
                              ::ShardBeginReply* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void ShardKvBase_Stub::END(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ShardEndArgs* request,
                              ::ShardEndReply* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void ShardKvBase_Stub::ABORT(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ShardAbortArgs* request,
                              ::ShardAbortReply* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void ShardKvBase_Stub::CONNECT(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ConnectArgs* request,
                              ::ConnectReply* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ShardBeginArgs* Arena::CreateMaybeMessage< ::ShardBeginArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShardBeginArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::ShardBeginReply* Arena::CreateMaybeMessage< ::ShardBeginReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShardBeginReply >(arena);
}
template<> PROTOBUF_NOINLINE ::ShardEndArgs* Arena::CreateMaybeMessage< ::ShardEndArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShardEndArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::ShardEndReply* Arena::CreateMaybeMessage< ::ShardEndReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShardEndReply >(arena);
}
template<> PROTOBUF_NOINLINE ::ShardAbortArgs* Arena::CreateMaybeMessage< ::ShardAbortArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShardAbortArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::ShardAbortReply* Arena::CreateMaybeMessage< ::ShardAbortReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShardAbortReply >(arena);
}
template<> PROTOBUF_NOINLINE ::ShardReadArgs* Arena::CreateMaybeMessage< ::ShardReadArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShardReadArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::ShardReadReply* Arena::CreateMaybeMessage< ::ShardReadReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShardReadReply >(arena);
}
template<> PROTOBUF_NOINLINE ::ShardWriteArgs* Arena::CreateMaybeMessage< ::ShardWriteArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShardWriteArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::ShardWriteReply* Arena::CreateMaybeMessage< ::ShardWriteReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShardWriteReply >(arena);
}
template<> PROTOBUF_NOINLINE ::ConnectArgs* Arena::CreateMaybeMessage< ::ConnectArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ConnectArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::ConnectReply* Arena::CreateMaybeMessage< ::ConnectReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ConnectReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
