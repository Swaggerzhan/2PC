// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shardkv.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_shardkv_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_shardkv_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_shardkv_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_shardkv_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_shardkv_2eproto;
class ConnectArgs;
struct ConnectArgsDefaultTypeInternal;
extern ConnectArgsDefaultTypeInternal _ConnectArgs_default_instance_;
class ConnectReply;
struct ConnectReplyDefaultTypeInternal;
extern ConnectReplyDefaultTypeInternal _ConnectReply_default_instance_;
class ShardAbortArgs;
struct ShardAbortArgsDefaultTypeInternal;
extern ShardAbortArgsDefaultTypeInternal _ShardAbortArgs_default_instance_;
class ShardAbortReply;
struct ShardAbortReplyDefaultTypeInternal;
extern ShardAbortReplyDefaultTypeInternal _ShardAbortReply_default_instance_;
class ShardBeginArgs;
struct ShardBeginArgsDefaultTypeInternal;
extern ShardBeginArgsDefaultTypeInternal _ShardBeginArgs_default_instance_;
class ShardBeginReply;
struct ShardBeginReplyDefaultTypeInternal;
extern ShardBeginReplyDefaultTypeInternal _ShardBeginReply_default_instance_;
class ShardEndArgs;
struct ShardEndArgsDefaultTypeInternal;
extern ShardEndArgsDefaultTypeInternal _ShardEndArgs_default_instance_;
class ShardEndReply;
struct ShardEndReplyDefaultTypeInternal;
extern ShardEndReplyDefaultTypeInternal _ShardEndReply_default_instance_;
class ShardReadArgs;
struct ShardReadArgsDefaultTypeInternal;
extern ShardReadArgsDefaultTypeInternal _ShardReadArgs_default_instance_;
class ShardReadReply;
struct ShardReadReplyDefaultTypeInternal;
extern ShardReadReplyDefaultTypeInternal _ShardReadReply_default_instance_;
class ShardWriteArgs;
struct ShardWriteArgsDefaultTypeInternal;
extern ShardWriteArgsDefaultTypeInternal _ShardWriteArgs_default_instance_;
class ShardWriteReply;
struct ShardWriteReplyDefaultTypeInternal;
extern ShardWriteReplyDefaultTypeInternal _ShardWriteReply_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ConnectArgs* Arena::CreateMaybeMessage<::ConnectArgs>(Arena*);
template<> ::ConnectReply* Arena::CreateMaybeMessage<::ConnectReply>(Arena*);
template<> ::ShardAbortArgs* Arena::CreateMaybeMessage<::ShardAbortArgs>(Arena*);
template<> ::ShardAbortReply* Arena::CreateMaybeMessage<::ShardAbortReply>(Arena*);
template<> ::ShardBeginArgs* Arena::CreateMaybeMessage<::ShardBeginArgs>(Arena*);
template<> ::ShardBeginReply* Arena::CreateMaybeMessage<::ShardBeginReply>(Arena*);
template<> ::ShardEndArgs* Arena::CreateMaybeMessage<::ShardEndArgs>(Arena*);
template<> ::ShardEndReply* Arena::CreateMaybeMessage<::ShardEndReply>(Arena*);
template<> ::ShardReadArgs* Arena::CreateMaybeMessage<::ShardReadArgs>(Arena*);
template<> ::ShardReadReply* Arena::CreateMaybeMessage<::ShardReadReply>(Arena*);
template<> ::ShardWriteArgs* Arena::CreateMaybeMessage<::ShardWriteArgs>(Arena*);
template<> ::ShardWriteReply* Arena::CreateMaybeMessage<::ShardWriteReply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ShardBeginArgs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShardBeginArgs) */ {
 public:
  inline ShardBeginArgs() : ShardBeginArgs(nullptr) {}
  ~ShardBeginArgs() override;
  explicit constexpr ShardBeginArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShardBeginArgs(const ShardBeginArgs& from);
  ShardBeginArgs(ShardBeginArgs&& from) noexcept
    : ShardBeginArgs() {
    *this = ::std::move(from);
  }

  inline ShardBeginArgs& operator=(const ShardBeginArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardBeginArgs& operator=(ShardBeginArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShardBeginArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShardBeginArgs* internal_default_instance() {
    return reinterpret_cast<const ShardBeginArgs*>(
               &_ShardBeginArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ShardBeginArgs& a, ShardBeginArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardBeginArgs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardBeginArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShardBeginArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShardBeginArgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShardBeginArgs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ShardBeginArgs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardBeginArgs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShardBeginArgs";
  }
  protected:
  explicit ShardBeginArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTidFieldNumber = 1,
  };
  // required int32 Tid = 1;
  bool has_tid() const;
  private:
  bool _internal_has_tid() const;
  public:
  void clear_tid();
  int32_t tid() const;
  void set_tid(int32_t value);
  private:
  int32_t _internal_tid() const;
  void _internal_set_tid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ShardBeginArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t tid_;
  friend struct ::TableStruct_shardkv_2eproto;
};
// -------------------------------------------------------------------

class ShardBeginReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShardBeginReply) */ {
 public:
  inline ShardBeginReply() : ShardBeginReply(nullptr) {}
  ~ShardBeginReply() override;
  explicit constexpr ShardBeginReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShardBeginReply(const ShardBeginReply& from);
  ShardBeginReply(ShardBeginReply&& from) noexcept
    : ShardBeginReply() {
    *this = ::std::move(from);
  }

  inline ShardBeginReply& operator=(const ShardBeginReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardBeginReply& operator=(ShardBeginReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShardBeginReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShardBeginReply* internal_default_instance() {
    return reinterpret_cast<const ShardBeginReply*>(
               &_ShardBeginReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ShardBeginReply& a, ShardBeginReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardBeginReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardBeginReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShardBeginReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShardBeginReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShardBeginReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ShardBeginReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardBeginReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShardBeginReply";
  }
  protected:
  explicit ShardBeginReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrFieldNumber = 1,
  };
  // required int32 err = 1;
  bool has_err() const;
  private:
  bool _internal_has_err() const;
  public:
  void clear_err();
  int32_t err() const;
  void set_err(int32_t value);
  private:
  int32_t _internal_err() const;
  void _internal_set_err(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ShardBeginReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t err_;
  friend struct ::TableStruct_shardkv_2eproto;
};
// -------------------------------------------------------------------

class ShardEndArgs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShardEndArgs) */ {
 public:
  inline ShardEndArgs() : ShardEndArgs(nullptr) {}
  ~ShardEndArgs() override;
  explicit constexpr ShardEndArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShardEndArgs(const ShardEndArgs& from);
  ShardEndArgs(ShardEndArgs&& from) noexcept
    : ShardEndArgs() {
    *this = ::std::move(from);
  }

  inline ShardEndArgs& operator=(const ShardEndArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardEndArgs& operator=(ShardEndArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShardEndArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShardEndArgs* internal_default_instance() {
    return reinterpret_cast<const ShardEndArgs*>(
               &_ShardEndArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ShardEndArgs& a, ShardEndArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardEndArgs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardEndArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShardEndArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShardEndArgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShardEndArgs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ShardEndArgs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardEndArgs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShardEndArgs";
  }
  protected:
  explicit ShardEndArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTidFieldNumber = 1,
  };
  // required int32 Tid = 1;
  bool has_tid() const;
  private:
  bool _internal_has_tid() const;
  public:
  void clear_tid();
  int32_t tid() const;
  void set_tid(int32_t value);
  private:
  int32_t _internal_tid() const;
  void _internal_set_tid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ShardEndArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t tid_;
  friend struct ::TableStruct_shardkv_2eproto;
};
// -------------------------------------------------------------------

class ShardEndReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShardEndReply) */ {
 public:
  inline ShardEndReply() : ShardEndReply(nullptr) {}
  ~ShardEndReply() override;
  explicit constexpr ShardEndReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShardEndReply(const ShardEndReply& from);
  ShardEndReply(ShardEndReply&& from) noexcept
    : ShardEndReply() {
    *this = ::std::move(from);
  }

  inline ShardEndReply& operator=(const ShardEndReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardEndReply& operator=(ShardEndReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShardEndReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShardEndReply* internal_default_instance() {
    return reinterpret_cast<const ShardEndReply*>(
               &_ShardEndReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ShardEndReply& a, ShardEndReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardEndReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardEndReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShardEndReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShardEndReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShardEndReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ShardEndReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardEndReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShardEndReply";
  }
  protected:
  explicit ShardEndReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrFieldNumber = 1,
  };
  // required int32 err = 1;
  bool has_err() const;
  private:
  bool _internal_has_err() const;
  public:
  void clear_err();
  int32_t err() const;
  void set_err(int32_t value);
  private:
  int32_t _internal_err() const;
  void _internal_set_err(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ShardEndReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t err_;
  friend struct ::TableStruct_shardkv_2eproto;
};
// -------------------------------------------------------------------

class ShardAbortArgs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShardAbortArgs) */ {
 public:
  inline ShardAbortArgs() : ShardAbortArgs(nullptr) {}
  ~ShardAbortArgs() override;
  explicit constexpr ShardAbortArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShardAbortArgs(const ShardAbortArgs& from);
  ShardAbortArgs(ShardAbortArgs&& from) noexcept
    : ShardAbortArgs() {
    *this = ::std::move(from);
  }

  inline ShardAbortArgs& operator=(const ShardAbortArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardAbortArgs& operator=(ShardAbortArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShardAbortArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShardAbortArgs* internal_default_instance() {
    return reinterpret_cast<const ShardAbortArgs*>(
               &_ShardAbortArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ShardAbortArgs& a, ShardAbortArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardAbortArgs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardAbortArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShardAbortArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShardAbortArgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShardAbortArgs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ShardAbortArgs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardAbortArgs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShardAbortArgs";
  }
  protected:
  explicit ShardAbortArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTidFieldNumber = 1,
  };
  // required int32 Tid = 1;
  bool has_tid() const;
  private:
  bool _internal_has_tid() const;
  public:
  void clear_tid();
  int32_t tid() const;
  void set_tid(int32_t value);
  private:
  int32_t _internal_tid() const;
  void _internal_set_tid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ShardAbortArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t tid_;
  friend struct ::TableStruct_shardkv_2eproto;
};
// -------------------------------------------------------------------

class ShardAbortReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShardAbortReply) */ {
 public:
  inline ShardAbortReply() : ShardAbortReply(nullptr) {}
  ~ShardAbortReply() override;
  explicit constexpr ShardAbortReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShardAbortReply(const ShardAbortReply& from);
  ShardAbortReply(ShardAbortReply&& from) noexcept
    : ShardAbortReply() {
    *this = ::std::move(from);
  }

  inline ShardAbortReply& operator=(const ShardAbortReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardAbortReply& operator=(ShardAbortReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShardAbortReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShardAbortReply* internal_default_instance() {
    return reinterpret_cast<const ShardAbortReply*>(
               &_ShardAbortReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ShardAbortReply& a, ShardAbortReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardAbortReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardAbortReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShardAbortReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShardAbortReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShardAbortReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ShardAbortReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardAbortReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShardAbortReply";
  }
  protected:
  explicit ShardAbortReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrFieldNumber = 1,
  };
  // required int32 err = 1;
  bool has_err() const;
  private:
  bool _internal_has_err() const;
  public:
  void clear_err();
  int32_t err() const;
  void set_err(int32_t value);
  private:
  int32_t _internal_err() const;
  void _internal_set_err(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ShardAbortReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t err_;
  friend struct ::TableStruct_shardkv_2eproto;
};
// -------------------------------------------------------------------

class ShardReadArgs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShardReadArgs) */ {
 public:
  inline ShardReadArgs() : ShardReadArgs(nullptr) {}
  ~ShardReadArgs() override;
  explicit constexpr ShardReadArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShardReadArgs(const ShardReadArgs& from);
  ShardReadArgs(ShardReadArgs&& from) noexcept
    : ShardReadArgs() {
    *this = ::std::move(from);
  }

  inline ShardReadArgs& operator=(const ShardReadArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardReadArgs& operator=(ShardReadArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShardReadArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShardReadArgs* internal_default_instance() {
    return reinterpret_cast<const ShardReadArgs*>(
               &_ShardReadArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ShardReadArgs& a, ShardReadArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardReadArgs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardReadArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShardReadArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShardReadArgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShardReadArgs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ShardReadArgs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardReadArgs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShardReadArgs";
  }
  protected:
  explicit ShardReadArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kTidFieldNumber = 1,
  };
  // required string key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // required int32 Tid = 1;
  bool has_tid() const;
  private:
  bool _internal_has_tid() const;
  public:
  void clear_tid();
  int32_t tid() const;
  void set_tid(int32_t value);
  private:
  int32_t _internal_tid() const;
  void _internal_set_tid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ShardReadArgs)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  int32_t tid_;
  friend struct ::TableStruct_shardkv_2eproto;
};
// -------------------------------------------------------------------

class ShardReadReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShardReadReply) */ {
 public:
  inline ShardReadReply() : ShardReadReply(nullptr) {}
  ~ShardReadReply() override;
  explicit constexpr ShardReadReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShardReadReply(const ShardReadReply& from);
  ShardReadReply(ShardReadReply&& from) noexcept
    : ShardReadReply() {
    *this = ::std::move(from);
  }

  inline ShardReadReply& operator=(const ShardReadReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardReadReply& operator=(ShardReadReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShardReadReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShardReadReply* internal_default_instance() {
    return reinterpret_cast<const ShardReadReply*>(
               &_ShardReadReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ShardReadReply& a, ShardReadReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardReadReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardReadReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShardReadReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShardReadReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShardReadReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ShardReadReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardReadReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShardReadReply";
  }
  protected:
  explicit ShardReadReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kErrFieldNumber = 1,
  };
  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // required int32 err = 1;
  bool has_err() const;
  private:
  bool _internal_has_err() const;
  public:
  void clear_err();
  int32_t err() const;
  void set_err(int32_t value);
  private:
  int32_t _internal_err() const;
  void _internal_set_err(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ShardReadReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int32_t err_;
  friend struct ::TableStruct_shardkv_2eproto;
};
// -------------------------------------------------------------------

class ShardWriteArgs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShardWriteArgs) */ {
 public:
  inline ShardWriteArgs() : ShardWriteArgs(nullptr) {}
  ~ShardWriteArgs() override;
  explicit constexpr ShardWriteArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShardWriteArgs(const ShardWriteArgs& from);
  ShardWriteArgs(ShardWriteArgs&& from) noexcept
    : ShardWriteArgs() {
    *this = ::std::move(from);
  }

  inline ShardWriteArgs& operator=(const ShardWriteArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardWriteArgs& operator=(ShardWriteArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShardWriteArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShardWriteArgs* internal_default_instance() {
    return reinterpret_cast<const ShardWriteArgs*>(
               &_ShardWriteArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ShardWriteArgs& a, ShardWriteArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardWriteArgs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardWriteArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShardWriteArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShardWriteArgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShardWriteArgs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ShardWriteArgs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardWriteArgs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShardWriteArgs";
  }
  protected:
  explicit ShardWriteArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kClientIDFieldNumber = 4,
    kSeqIDFieldNumber = 5,
    kTidFieldNumber = 1,
  };
  // required string key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // required string value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional int64 clientID = 4;
  bool has_clientid() const;
  private:
  bool _internal_has_clientid() const;
  public:
  void clear_clientid();
  int64_t clientid() const;
  void set_clientid(int64_t value);
  private:
  int64_t _internal_clientid() const;
  void _internal_set_clientid(int64_t value);
  public:

  // optional int64 seqID = 5;
  bool has_seqid() const;
  private:
  bool _internal_has_seqid() const;
  public:
  void clear_seqid();
  int64_t seqid() const;
  void set_seqid(int64_t value);
  private:
  int64_t _internal_seqid() const;
  void _internal_set_seqid(int64_t value);
  public:

  // required int32 Tid = 1;
  bool has_tid() const;
  private:
  bool _internal_has_tid() const;
  public:
  void clear_tid();
  int32_t tid() const;
  void set_tid(int32_t value);
  private:
  int32_t _internal_tid() const;
  void _internal_set_tid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ShardWriteArgs)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int64_t clientid_;
  int64_t seqid_;
  int32_t tid_;
  friend struct ::TableStruct_shardkv_2eproto;
};
// -------------------------------------------------------------------

class ShardWriteReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShardWriteReply) */ {
 public:
  inline ShardWriteReply() : ShardWriteReply(nullptr) {}
  ~ShardWriteReply() override;
  explicit constexpr ShardWriteReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShardWriteReply(const ShardWriteReply& from);
  ShardWriteReply(ShardWriteReply&& from) noexcept
    : ShardWriteReply() {
    *this = ::std::move(from);
  }

  inline ShardWriteReply& operator=(const ShardWriteReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardWriteReply& operator=(ShardWriteReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShardWriteReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShardWriteReply* internal_default_instance() {
    return reinterpret_cast<const ShardWriteReply*>(
               &_ShardWriteReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ShardWriteReply& a, ShardWriteReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardWriteReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardWriteReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShardWriteReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShardWriteReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShardWriteReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ShardWriteReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardWriteReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShardWriteReply";
  }
  protected:
  explicit ShardWriteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrFieldNumber = 1,
  };
  // required int32 err = 1;
  bool has_err() const;
  private:
  bool _internal_has_err() const;
  public:
  void clear_err();
  int32_t err() const;
  void set_err(int32_t value);
  private:
  int32_t _internal_err() const;
  void _internal_set_err(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ShardWriteReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t err_;
  friend struct ::TableStruct_shardkv_2eproto;
};
// -------------------------------------------------------------------

class ConnectArgs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConnectArgs) */ {
 public:
  inline ConnectArgs() : ConnectArgs(nullptr) {}
  ~ConnectArgs() override;
  explicit constexpr ConnectArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectArgs(const ConnectArgs& from);
  ConnectArgs(ConnectArgs&& from) noexcept
    : ConnectArgs() {
    *this = ::std::move(from);
  }

  inline ConnectArgs& operator=(const ConnectArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectArgs& operator=(ConnectArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectArgs* internal_default_instance() {
    return reinterpret_cast<const ConnectArgs*>(
               &_ConnectArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ConnectArgs& a, ConnectArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectArgs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectArgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectArgs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConnectArgs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectArgs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConnectArgs";
  }
  protected:
  explicit ConnectArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 1,
  };
  // required string host = 1;
  bool has_host() const;
  private:
  bool _internal_has_host() const;
  public:
  void clear_host();
  const std::string& host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // @@protoc_insertion_point(class_scope:ConnectArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  friend struct ::TableStruct_shardkv_2eproto;
};
// -------------------------------------------------------------------

class ConnectReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConnectReply) */ {
 public:
  inline ConnectReply() : ConnectReply(nullptr) {}
  ~ConnectReply() override;
  explicit constexpr ConnectReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectReply(const ConnectReply& from);
  ConnectReply(ConnectReply&& from) noexcept
    : ConnectReply() {
    *this = ::std::move(from);
  }

  inline ConnectReply& operator=(const ConnectReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectReply& operator=(ConnectReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectReply* internal_default_instance() {
    return reinterpret_cast<const ConnectReply*>(
               &_ConnectReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ConnectReply& a, ConnectReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConnectReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConnectReply";
  }
  protected:
  explicit ConnectReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrFieldNumber = 1,
  };
  // required int32 err = 1;
  bool has_err() const;
  private:
  bool _internal_has_err() const;
  public:
  void clear_err();
  int32_t err() const;
  void set_err(int32_t value);
  private:
  int32_t _internal_err() const;
  void _internal_set_err(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ConnectReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t err_;
  friend struct ::TableStruct_shardkv_2eproto;
};
// ===================================================================

class ShardKvBase_Stub;

class ShardKvBase : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ShardKvBase() {};
 public:
  virtual ~ShardKvBase();

  typedef ShardKvBase_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void PrepareRead(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ShardReadArgs* request,
                       ::ShardReadReply* response,
                       ::google::protobuf::Closure* done);
  virtual void PrepareWrite(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ShardWriteArgs* request,
                       ::ShardWriteReply* response,
                       ::google::protobuf::Closure* done);
  virtual void BEGIN(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ShardBeginArgs* request,
                       ::ShardBeginReply* response,
                       ::google::protobuf::Closure* done);
  virtual void END(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ShardEndArgs* request,
                       ::ShardEndReply* response,
                       ::google::protobuf::Closure* done);
  virtual void ABORT(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ShardAbortArgs* request,
                       ::ShardAbortReply* response,
                       ::google::protobuf::Closure* done);
  virtual void CONNECT(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ConnectArgs* request,
                       ::ConnectReply* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ShardKvBase);
};

class ShardKvBase_Stub : public ShardKvBase {
 public:
  ShardKvBase_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  ShardKvBase_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~ShardKvBase_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements ShardKvBase ------------------------------------------

  void PrepareRead(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ShardReadArgs* request,
                       ::ShardReadReply* response,
                       ::google::protobuf::Closure* done);
  void PrepareWrite(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ShardWriteArgs* request,
                       ::ShardWriteReply* response,
                       ::google::protobuf::Closure* done);
  void BEGIN(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ShardBeginArgs* request,
                       ::ShardBeginReply* response,
                       ::google::protobuf::Closure* done);
  void END(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ShardEndArgs* request,
                       ::ShardEndReply* response,
                       ::google::protobuf::Closure* done);
  void ABORT(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ShardAbortArgs* request,
                       ::ShardAbortReply* response,
                       ::google::protobuf::Closure* done);
  void CONNECT(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ConnectArgs* request,
                       ::ConnectReply* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ShardKvBase_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ShardBeginArgs

// required int32 Tid = 1;
inline bool ShardBeginArgs::_internal_has_tid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShardBeginArgs::has_tid() const {
  return _internal_has_tid();
}
inline void ShardBeginArgs::clear_tid() {
  tid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t ShardBeginArgs::_internal_tid() const {
  return tid_;
}
inline int32_t ShardBeginArgs::tid() const {
  // @@protoc_insertion_point(field_get:ShardBeginArgs.Tid)
  return _internal_tid();
}
inline void ShardBeginArgs::_internal_set_tid(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  tid_ = value;
}
inline void ShardBeginArgs::set_tid(int32_t value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:ShardBeginArgs.Tid)
}

// -------------------------------------------------------------------

// ShardBeginReply

// required int32 err = 1;
inline bool ShardBeginReply::_internal_has_err() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShardBeginReply::has_err() const {
  return _internal_has_err();
}
inline void ShardBeginReply::clear_err() {
  err_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t ShardBeginReply::_internal_err() const {
  return err_;
}
inline int32_t ShardBeginReply::err() const {
  // @@protoc_insertion_point(field_get:ShardBeginReply.err)
  return _internal_err();
}
inline void ShardBeginReply::_internal_set_err(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  err_ = value;
}
inline void ShardBeginReply::set_err(int32_t value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:ShardBeginReply.err)
}

// -------------------------------------------------------------------

// ShardEndArgs

// required int32 Tid = 1;
inline bool ShardEndArgs::_internal_has_tid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShardEndArgs::has_tid() const {
  return _internal_has_tid();
}
inline void ShardEndArgs::clear_tid() {
  tid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t ShardEndArgs::_internal_tid() const {
  return tid_;
}
inline int32_t ShardEndArgs::tid() const {
  // @@protoc_insertion_point(field_get:ShardEndArgs.Tid)
  return _internal_tid();
}
inline void ShardEndArgs::_internal_set_tid(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  tid_ = value;
}
inline void ShardEndArgs::set_tid(int32_t value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:ShardEndArgs.Tid)
}

// -------------------------------------------------------------------

// ShardEndReply

// required int32 err = 1;
inline bool ShardEndReply::_internal_has_err() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShardEndReply::has_err() const {
  return _internal_has_err();
}
inline void ShardEndReply::clear_err() {
  err_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t ShardEndReply::_internal_err() const {
  return err_;
}
inline int32_t ShardEndReply::err() const {
  // @@protoc_insertion_point(field_get:ShardEndReply.err)
  return _internal_err();
}
inline void ShardEndReply::_internal_set_err(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  err_ = value;
}
inline void ShardEndReply::set_err(int32_t value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:ShardEndReply.err)
}

// -------------------------------------------------------------------

// ShardAbortArgs

// required int32 Tid = 1;
inline bool ShardAbortArgs::_internal_has_tid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShardAbortArgs::has_tid() const {
  return _internal_has_tid();
}
inline void ShardAbortArgs::clear_tid() {
  tid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t ShardAbortArgs::_internal_tid() const {
  return tid_;
}
inline int32_t ShardAbortArgs::tid() const {
  // @@protoc_insertion_point(field_get:ShardAbortArgs.Tid)
  return _internal_tid();
}
inline void ShardAbortArgs::_internal_set_tid(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  tid_ = value;
}
inline void ShardAbortArgs::set_tid(int32_t value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:ShardAbortArgs.Tid)
}

// -------------------------------------------------------------------

// ShardAbortReply

// required int32 err = 1;
inline bool ShardAbortReply::_internal_has_err() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShardAbortReply::has_err() const {
  return _internal_has_err();
}
inline void ShardAbortReply::clear_err() {
  err_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t ShardAbortReply::_internal_err() const {
  return err_;
}
inline int32_t ShardAbortReply::err() const {
  // @@protoc_insertion_point(field_get:ShardAbortReply.err)
  return _internal_err();
}
inline void ShardAbortReply::_internal_set_err(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  err_ = value;
}
inline void ShardAbortReply::set_err(int32_t value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:ShardAbortReply.err)
}

// -------------------------------------------------------------------

// ShardReadArgs

// required int32 Tid = 1;
inline bool ShardReadArgs::_internal_has_tid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ShardReadArgs::has_tid() const {
  return _internal_has_tid();
}
inline void ShardReadArgs::clear_tid() {
  tid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t ShardReadArgs::_internal_tid() const {
  return tid_;
}
inline int32_t ShardReadArgs::tid() const {
  // @@protoc_insertion_point(field_get:ShardReadArgs.Tid)
  return _internal_tid();
}
inline void ShardReadArgs::_internal_set_tid(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  tid_ = value;
}
inline void ShardReadArgs::set_tid(int32_t value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:ShardReadArgs.Tid)
}

// required string key = 2;
inline bool ShardReadArgs::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShardReadArgs::has_key() const {
  return _internal_has_key();
}
inline void ShardReadArgs::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ShardReadArgs::key() const {
  // @@protoc_insertion_point(field_get:ShardReadArgs.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShardReadArgs::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ShardReadArgs.key)
}
inline std::string* ShardReadArgs::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:ShardReadArgs.key)
  return _s;
}
inline const std::string& ShardReadArgs::_internal_key() const {
  return key_.Get();
}
inline void ShardReadArgs::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ShardReadArgs::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ShardReadArgs::release_key() {
  // @@protoc_insertion_point(field_release:ShardReadArgs.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ShardReadArgs::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ShardReadArgs.key)
}

// -------------------------------------------------------------------

// ShardReadReply

// required int32 err = 1;
inline bool ShardReadReply::_internal_has_err() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ShardReadReply::has_err() const {
  return _internal_has_err();
}
inline void ShardReadReply::clear_err() {
  err_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t ShardReadReply::_internal_err() const {
  return err_;
}
inline int32_t ShardReadReply::err() const {
  // @@protoc_insertion_point(field_get:ShardReadReply.err)
  return _internal_err();
}
inline void ShardReadReply::_internal_set_err(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  err_ = value;
}
inline void ShardReadReply::set_err(int32_t value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:ShardReadReply.err)
}

// optional string value = 2;
inline bool ShardReadReply::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShardReadReply::has_value() const {
  return _internal_has_value();
}
inline void ShardReadReply::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ShardReadReply::value() const {
  // @@protoc_insertion_point(field_get:ShardReadReply.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShardReadReply::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ShardReadReply.value)
}
inline std::string* ShardReadReply::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:ShardReadReply.value)
  return _s;
}
inline const std::string& ShardReadReply::_internal_value() const {
  return value_.Get();
}
inline void ShardReadReply::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ShardReadReply::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ShardReadReply::release_value() {
  // @@protoc_insertion_point(field_release:ShardReadReply.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ShardReadReply::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ShardReadReply.value)
}

// -------------------------------------------------------------------

// ShardWriteArgs

// required int32 Tid = 1;
inline bool ShardWriteArgs::_internal_has_tid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ShardWriteArgs::has_tid() const {
  return _internal_has_tid();
}
inline void ShardWriteArgs::clear_tid() {
  tid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t ShardWriteArgs::_internal_tid() const {
  return tid_;
}
inline int32_t ShardWriteArgs::tid() const {
  // @@protoc_insertion_point(field_get:ShardWriteArgs.Tid)
  return _internal_tid();
}
inline void ShardWriteArgs::_internal_set_tid(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  tid_ = value;
}
inline void ShardWriteArgs::set_tid(int32_t value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:ShardWriteArgs.Tid)
}

// required string key = 2;
inline bool ShardWriteArgs::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShardWriteArgs::has_key() const {
  return _internal_has_key();
}
inline void ShardWriteArgs::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ShardWriteArgs::key() const {
  // @@protoc_insertion_point(field_get:ShardWriteArgs.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShardWriteArgs::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ShardWriteArgs.key)
}
inline std::string* ShardWriteArgs::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:ShardWriteArgs.key)
  return _s;
}
inline const std::string& ShardWriteArgs::_internal_key() const {
  return key_.Get();
}
inline void ShardWriteArgs::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ShardWriteArgs::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ShardWriteArgs::release_key() {
  // @@protoc_insertion_point(field_release:ShardWriteArgs.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ShardWriteArgs::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ShardWriteArgs.key)
}

// required string value = 3;
inline bool ShardWriteArgs::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ShardWriteArgs::has_value() const {
  return _internal_has_value();
}
inline void ShardWriteArgs::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ShardWriteArgs::value() const {
  // @@protoc_insertion_point(field_get:ShardWriteArgs.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShardWriteArgs::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ShardWriteArgs.value)
}
inline std::string* ShardWriteArgs::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:ShardWriteArgs.value)
  return _s;
}
inline const std::string& ShardWriteArgs::_internal_value() const {
  return value_.Get();
}
inline void ShardWriteArgs::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ShardWriteArgs::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ShardWriteArgs::release_value() {
  // @@protoc_insertion_point(field_release:ShardWriteArgs.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ShardWriteArgs::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ShardWriteArgs.value)
}

// optional int64 clientID = 4;
inline bool ShardWriteArgs::_internal_has_clientid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ShardWriteArgs::has_clientid() const {
  return _internal_has_clientid();
}
inline void ShardWriteArgs::clear_clientid() {
  clientid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t ShardWriteArgs::_internal_clientid() const {
  return clientid_;
}
inline int64_t ShardWriteArgs::clientid() const {
  // @@protoc_insertion_point(field_get:ShardWriteArgs.clientID)
  return _internal_clientid();
}
inline void ShardWriteArgs::_internal_set_clientid(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  clientid_ = value;
}
inline void ShardWriteArgs::set_clientid(int64_t value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:ShardWriteArgs.clientID)
}

// optional int64 seqID = 5;
inline bool ShardWriteArgs::_internal_has_seqid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ShardWriteArgs::has_seqid() const {
  return _internal_has_seqid();
}
inline void ShardWriteArgs::clear_seqid() {
  seqid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t ShardWriteArgs::_internal_seqid() const {
  return seqid_;
}
inline int64_t ShardWriteArgs::seqid() const {
  // @@protoc_insertion_point(field_get:ShardWriteArgs.seqID)
  return _internal_seqid();
}
inline void ShardWriteArgs::_internal_set_seqid(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  seqid_ = value;
}
inline void ShardWriteArgs::set_seqid(int64_t value) {
  _internal_set_seqid(value);
  // @@protoc_insertion_point(field_set:ShardWriteArgs.seqID)
}

// -------------------------------------------------------------------

// ShardWriteReply

// required int32 err = 1;
inline bool ShardWriteReply::_internal_has_err() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShardWriteReply::has_err() const {
  return _internal_has_err();
}
inline void ShardWriteReply::clear_err() {
  err_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t ShardWriteReply::_internal_err() const {
  return err_;
}
inline int32_t ShardWriteReply::err() const {
  // @@protoc_insertion_point(field_get:ShardWriteReply.err)
  return _internal_err();
}
inline void ShardWriteReply::_internal_set_err(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  err_ = value;
}
inline void ShardWriteReply::set_err(int32_t value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:ShardWriteReply.err)
}

// -------------------------------------------------------------------

// ConnectArgs

// required string host = 1;
inline bool ConnectArgs::_internal_has_host() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConnectArgs::has_host() const {
  return _internal_has_host();
}
inline void ConnectArgs::clear_host() {
  host_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConnectArgs::host() const {
  // @@protoc_insertion_point(field_get:ConnectArgs.host)
  return _internal_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConnectArgs::set_host(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ConnectArgs.host)
}
inline std::string* ConnectArgs::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:ConnectArgs.host)
  return _s;
}
inline const std::string& ConnectArgs::_internal_host() const {
  return host_.Get();
}
inline void ConnectArgs::_internal_set_host(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConnectArgs::_internal_mutable_host() {
  _has_bits_[0] |= 0x00000001u;
  return host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConnectArgs::release_host() {
  // @@protoc_insertion_point(field_release:ConnectArgs.host)
  if (!_internal_has_host()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = host_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (host_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConnectArgs::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (host_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ConnectArgs.host)
}

// -------------------------------------------------------------------

// ConnectReply

// required int32 err = 1;
inline bool ConnectReply::_internal_has_err() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConnectReply::has_err() const {
  return _internal_has_err();
}
inline void ConnectReply::clear_err() {
  err_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t ConnectReply::_internal_err() const {
  return err_;
}
inline int32_t ConnectReply::err() const {
  // @@protoc_insertion_point(field_get:ConnectReply.err)
  return _internal_err();
}
inline void ConnectReply::_internal_set_err(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  err_ = value;
}
inline void ConnectReply::set_err(int32_t value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:ConnectReply.err)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_shardkv_2eproto
